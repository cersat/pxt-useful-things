{"entries":[{"timestamp":1759499340268,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":405,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":38,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":199,"length1":43,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":226,"length1":35,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"settings.ts","value":"\n/**\n* Используйте этот файл для определения пользовательских функций и блоков.\n* Подробнее на https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function blink(times: number, pixel: number): void {\n        for (let i = 0; i < times; i++) {\n            basic.showIcon(IconNames.Heart)\n            basic.pause(300)\n            basic.clearScreen()\n            basic.pause(300)\n        }\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n"}]},{"timestamp":1759499934749,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":469,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"custom_blink\"><value name=\"times\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><value name=\"pixel\"><shadow type=\"math_number\"><field name=\"NUM\">10000000000000000000</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":48,"diffs":[[1,"custom.blink(1, 10000000000000000000)\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":143,"length1":61,"diffs":[[1,"enum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n"]]},{"start1":510,"length1":102,"diffs":[[1,"    export function blink(times: number, pixel: number): void {\n"]]},{"start1":616,"length1":39,"diffs":[[1,"            basic.showIcon(IconNames.Heart)\n"]]}]}]},{"timestamp":1759500501714,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":131,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"custom_blink\"><field name=\"pixelX\">LedChoice.a</field><field name=\"pixelY\">LedChoice.c</field><value name=\"times\"><shadow type=\"math_number\"><field name=\"NUM\">8</field></shadow></value><value name=\"delay\"><shadow type=\"math_number\"><field name=\"NUM\">50</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":79,"diffs":[[1,"custom.blink(\n8,\n50,\nLedChoice.a,\nLedChoice.c\n)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":249,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":908,"length1":118,"diffs":[[1,"    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n"]]}]}]},{"timestamp":1759501092071,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":226,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"custom.waituntil(input.compassHeading() > 180)\nbasic.showIcon(IconNames.Heart)\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":908,"length1":95,"diffs":[[1,"    export function waituntil(bool: boolean): void {\n        while (!(bool)) {\n"]]}]}]},{"timestamp":1759501690096,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":528,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"custom_waituntil\" disabled-reasons=\"pxt_automatic_disabled\" x=\"98\" y=\"43\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":77,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":789,"length1":261,"diffs":[[1,"\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function waituntil(condition: () => boolean): void {\n        while (!condition()) {\n            basic.pause(100)\n        }\n"]]},{"start1":1048,"length1":1,"diffs":[[1,"}\n"]]}]}]},{"timestamp":1759502005902,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":526,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"36\" y=\"52\"><statement name=\"HANDLER\"><block type=\"custom_waitUntil\"><value name=\"cond\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"device_get_button2\"><field name=\"NAME\">Button.A</field></block></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello!</field></shadow></value></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1759502373187,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"settings.ts","patch":[{"start1":1056,"length1":450,"diffs":[[1,""]]}]}]},{"timestamp":1759502892540,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1127,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"custom_waitUntil\"><value name=\"cond\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"device_get_button2\"><field name=\"NAME\">Button.A</field></block></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello!</field></shadow></value></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":127,"diffs":[[1,""]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":1176,"length1":62,"diffs":[[1,"    //% blockSetVariable=myVar\n    export function containerWithVar(myVar: number, body: () => void): void {\n        // Можно что-то сделать с переменной перед телом\n        myVar += 10; // пример обработки\n        body();      // выполняем вложенные блоки\n        // После body можно менять myVar снова\n        myVar *= 2;\n"]]}]}]},{"timestamp":1759503484912,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":661,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"custom_waitUntil\"><value name=\"cond\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"device_get_button2\"><field name=\"NAME\">Button.A</field></block></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello!</field></shadow></value></block></next></block></statement></block><block type=\"custom_containerWithVar\" x=\"408\" y=\"20\"><value name=\"myVar\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value><statement name=\"HANDLER\"><block type=\"device_show_number\"><data>{\"commentRefs\":[],\"fieldData\":{}}</data><value name=\"number\"><shadow type=\"math_number\"><field name=\"NUM\">123</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></next></block></next></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":83,"diffs":[[1,"custom.containerWithVar(5, function () {\n    basic.showNumber(123)\n    basic.pause(500)\n    basic.showIcon(IconNames.Heart)\n})\ncustom.waitUntil(input.buttonIsPressed(Button.A))\nbasic.showString(\"Hello!\")\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":1126,"length1":191,"diffs":[[1,"    //% block=\"мой контейнер с переменной %myVar\"\n    export function container(keyboard: string): e {\n        \n"]]}]}]},{"timestamp":1759504049823,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"settings.ts","patch":[{"start1":1148,"length1":77,"diffs":[[1,"    export function container(if; boolean, yes; string, no: string): string {\n"]]}]}]},{"timestamp":1759507711773,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"settings.ts","patch":[{"start1":1148,"length1":78,"diffs":[[1,"    export function container(if; boolean, yes; string, no string): string {\n"]]}]}]},{"timestamp":1759507800152,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":472,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"32\" y=\"50\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello!</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Bye!</field></shadow></value></block></statement></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":53,"diffs":[[1,"if (true) {\n    basic.showString(\"Hello!\")\n} else {\n    basic.showString(\"Bye!\")\n}\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":249,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":1,"length1":0,"diffs":[[1,"/**\n* Используйте этот файл для определения пользовательских функций и блоков.\n* Подробнее на https://makecode.microbit.org/blocks/custom\n*/\n"]]},{"start1":232,"length1":63,"diffs":[[1,"//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n"]]},{"start1":297,"length1":53,"diffs":[[1,"     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n"]]},{"start1":486,"length1":86,"diffs":[[1,"    //% block\n"]]},{"start1":857,"length1":34,"diffs":[[1,"       //% block=\"ждать пока %cond\"\n"]]},{"start1":1126,"length1":148,"diffs":[[1,"    //% block=\"Если \"\n    export function container(if; boolean, yes; string, no; string): string {\n        if (if) (\n"]]},{"start1":1306,"length1":10,"diffs":[[1,"        )\n"]]}]}]},{"timestamp":1759508340425,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":589,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"UsefulBlocks_blink\"><field name=\"pixelX\">LedChoice.a</field><field name=\"pixelY\">LedChoice.a</field><value name=\"times\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"delay\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":108,"diffs":[[1,"UsefulBlocks.blink(\n0,\n0,\nLedChoice.a,\nLedChoice.a\n)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":249,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":1153,"length1":0,"diffs":[[1,"\n"]]},{"start1":1160,"length1":305,"diffs":[[1,""]]}]}]},{"timestamp":1759508938217,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":109,"length1":58,"diffs":[[1,"        \"microphone\": \"*\"\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":129,"length1":26,"diffs":[[1,"namespace UsefulBlocks {\n    /**\n     * Пример блока-контейнера с выходной переменной\n     */\n"]]},{"start1":872,"length1":76,"diffs":[[1,"     * Пример блока-контейнера с выходной переменной\n"]]},{"start1":1159,"length1":50,"diffs":[[1,""]]}]}]},{"timestamp":1759509536065,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"settings.ts","patch":[{"start1":155,"length1":83,"diffs":[[1,""]]},{"start1":535,"length1":8,"diffs":[[1,"       /**\n"]]},{"start1":1274,"length1":0,"diffs":[[1,"            // функция logoIsPressed существует только на v2\n"]]},{"start1":1469,"length1":306,"diffs":[[1,""]]}]}]},{"timestamp":1759510148175,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"settings.ts","patch":[{"start1":1537,"length1":17,"diffs":[[1,"    //% block=\"это micro:bit v2?\"\n"]]}]}]},{"timestamp":1759510162135,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1075,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"UsefulBlocks_isV2\"></block></value><statement name=\"DO0\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement><statement name=\"ELSE\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":67,"diffs":[[1,"if (UsefulBlocks.isV2()) {\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":1537,"length1":276,"diffs":[[1,"    //% block=\"\"\n    export function i2cReadNum(address: number, format: NumberFormat, repeated?: boolean): number {\n        let buf = pins.i2cReadBuffer(address, pins.sizeOf(format), repeated)\n"]]}]}]},{"timestamp":1759510380900,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":281,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1759511967445,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1073,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"UsefulBlocks_i2cReadNum\"><field name=\"format\">NumberFormat.Int8LE</field><value name=\"adress\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"repeated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement><statement name=\"ELSE\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block></statement></block></xml>"]]}]}]},{"timestamp":1759511968808,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":84,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"UsefulBlocks_i2cReadNum\"><field name=\"format\">NumberFormat.Int8LE</field><value name=\"adress\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"repeated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement><statement name=\"ELSE\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":1,"diffs":[[1,"if (UsefulBlocks.i2cReadNum(0, NumberFormat.Int8LE, false) == 2) {\n    basic.showIcon(IconNames.Heart)\n} else {\n    basic.showIcon(IconNames.Sad)\n}\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":281,"length1":75,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"settings.ts","patch":[{"start1":91,"length1":61,"diffs":[[1,"//% weight=100 color=#a64d79 icon=\"\"\n"]]}]},{"type":"added","filename":"test.ts","value":"// здесь помещаются тесты; они не будут скомпилированы, пока пакет используется в качестве расширения.\n"}]}],"snapshots":[{"timestamp":1759499340267,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Mod\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1759501144914,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"custom_waituntil\"><value name=\"bool\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></statement></block></xml>","main.ts":"","README.md":"","settings.ts":"\n/**\n* Используйте этот файл для определения пользовательских функций и блоков.\n* Подробнее на https://makecode.microbit.org/blocks/custom\n*/\n\nenum LedChoice {\n    a=0,\n    b=1,\n    c=2,\n    d=3,\n    e=4\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function blink(times: number, delay: number, pixelX: LedChoice, pixelY: LedChoice): void {\n        for (let i = 0; i < times; i++) {\n            led.toggle(pixelX, pixelY)\n            basic.pause(300)\n            basic.clearScreen()\n            basic.pause(300)\n        }\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function waituntil(bool: boolean): void {\n        while (!(bool)) {\n            basic.pause(100)\n        }\n    }\n}\n","pxt.json":"{\n    \"name\": \"Mod\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"settings.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1759503025927,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"custom_waitUntil\"><value name=\"cond\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow><block type=\"device_get_button2\"><field name=\"NAME\">Button.A</field></block></value><next><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello!</field></shadow></value></block></next></block></statement></block></xml>","main.ts":"custom.waitUntil(input.buttonIsPressed(Button.A))\nbasic.showString(\"Hello!\")\n","README.md":"","settings.ts":"\n/**\n* Используйте этот файл для определения пользовательских функций и блоков.\n* Подробнее на https://makecode.microbit.org/blocks/custom\n*/\n\nenum LedChoice {\n    a=0,\n    b=1,\n    c=2,\n    d=3,\n    e=4\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function blink(times: number, delay: number, pixelX: LedChoice, pixelY: LedChoice): void {\n        for (let i = 0; i < times; i++) {\n            led.toggle(pixelX, pixelY)\n            basic.pause(300)\n            basic.clearScreen()\n            basic.pause(300)\n        }\n    }\n    \n       /**\n     * Ждёт, пока условие не станет истинным\n    */\n       //% block=\"ждать пока %cond\"\n    //% cond.shadow=logic_boolean\n    export function waitUntil(cond: boolean): void {\n           while (!cond) {\n               basic.pause(100)\n         }\n    }\n\n    /**\n     * Пример блока-контейнера с выходной переменной\n     */\n    //% block=\"мой контейнер с переменной %myVar\"\n    //% blockSetVariable=myVar\n    export function containerWithVar(myVar: number, body: () => void): void {\n        // Можно что-то сделать с переменной перед телом\n        myVar += 10; // пример обработки\n        body();      // выполняем вложенные блоки\n        // После body можно менять myVar снова\n        myVar *= 2;\n    }\n}","pxt.json":"{\n    \"name\": \"Mod\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"settings.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759507711773,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"32\" y=\"50\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow></value><statement name=\"DO0\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Hello!</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"device_print_message\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">Bye!</field></shadow></value></block></statement></block></statement></block></xml>","main.ts":"if (true) {\n    basic.showString(\"Hello!\")\n} else {\n    basic.showString(\"Bye!\")\n}\n","README.md":"","settings.ts":"\n/**\n* Используйте этот файл для определения пользовательских функций и блоков.\n* Подробнее на https://makecode.microbit.org/blocks/custom\n*/\n\nenum LedChoice {\n    a=0,\n    b=1,\n    c=2,\n    d=3,\n    e=4\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function blink(times: number, delay: number, pixelX: LedChoice, pixelY: LedChoice): void {\n        for (let i = 0; i < times; i++) {\n            led.toggle(pixelX, pixelY)\n            basic.pause(300)\n            basic.clearScreen()\n            basic.pause(300)\n        }\n    }\n    \n       /**\n     * Ждёт, пока условие не станет истинным\n    */\n       //% block=\"ждать пока %cond\"\n    //% cond.shadow=logic_boolean\n    export function waitUntil(cond: boolean): void {\n           while (!cond) {\n               basic.pause(100)\n         }\n    }\n\n    /**\n     * Пример блока-контейнера с выходной переменной\n     */\n    //% block=\"Если \"\n    export function container(if; boolean, yes; string, no: string): string {\n        if (if) (\n            return yes\n        } else {\n            return no\n        )\n\n    }\n}","pxt.json":"{\n    \"name\": \"Mod\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"settings.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759509517549,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"UsefulBlocks_isV2\"></block></value><statement name=\"DO0\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement><statement name=\"ELSE\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block></statement></block></xml>","main.ts":"if (UsefulBlocks.isV2()) {\n    basic.showIcon(IconNames.Heart)\n} else {\n    basic.showIcon(IconNames.Sad)\n}\n","README.md":"","settings.ts":"\n\nenum LedChoice {\n    a=0,\n    b=1,\n    c=2,\n    d=3,\n    e=4\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#a64d79 icon=\"\"\nnamespace UsefulBlocks {;\n    //% block=\"Мерцать %times раз с задержкой %delay координаты: Х:%pixelX Y:%pixelY\"\n    export function blink(times: number, delay: number, pixelX: LedChoice, pixelY: LedChoice): void {\n        for (let i = 0; i < times; i++) {\n            led.toggle(pixelX, pixelY)\n            basic.pause(300)\n            basic.clearScreen()\n            basic.pause(300)\n        }\n    }\n    \n       /**\n     * Ждёт, пока условие не станет истинным\n    */\n       //% block=\"ждать до %cond\"\n    //% cond.shadow=logic_boolean\n    export function waitUntil(cond: boolean): void {\n           while (!cond) {\n               basic.pause(100)\n         }\n    }\n\n    /**\n     * Выводит первое значение, если условие истинно, и второе - если ложно\n     */\n    //% block=\"Если %check то %yes иначе %no\"\n    export function container(check: boolean, yes: string, no: string): string {\n        if (check) {\n            return yes\n        } else {\n            return no\n        }\n    }\n\n    /**\n     * Выводит первое значение, если усл\n     */\n    //% block=\"это micro:bit v2?\"\n    export function isV2(): boolean {\n        let v2 = false;\n        try {\n            // функция logoIsPressed существует только на v2\n            v2 = input.logoIsPressed() == undefined;\n        } catch (e) {\n            v2 = false;\n        }\n        return v2;\n    }\n}","pxt.json":"{\n    \"name\": \"Mod\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"audio-recording\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"settings.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1759511967445,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"UsefulBlocks_i2cReadNum\"><field name=\"format\">NumberFormat.Int8LE</field><value name=\"adress\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"repeated\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field></block></statement><statement name=\"ELSE\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Sad</field></block></statement></block></statement></block></xml>","main.ts":"if (UsefulBlocks.i2cReadNum(0, NumberFormat.Int8LE, false) == 2) {\n    basic.showIcon(IconNames.Heart)\n} else {\n    basic.showIcon(IconNames.Sad)\n}\n","README.md":"","settings.ts":"\n\nenum LedChoice {\n    a=0,\n    b=1,\n    c=2,\n    d=3,\n    e=4\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#a64d79 icon=\"\"\nnamespace UsefulBlocks {;\n    /**\n     * Заставляет указанный светодиод мерцать с указанной задержкой\n    */\n    //% block=\"Мерцать %times раз с задержкой %delay координаты: Х:%pixelX Y:%pixelY\"\n    export function blink(times: number, delay: number, pixelX: LedChoice, pixelY: LedChoice): void {\n        for (let i = 0; i < times; i++) {\n            led.toggle(pixelX, pixelY)\n            basic.pause(300)\n            basic.clearScreen()\n            basic.pause(300)\n        }\n    }\n    \n    /**\n     * Ждёт, пока условие не станет истинным\n    */\n       //% block=\"ждать до %cond\"\n    //% cond.shadow=logic_boolean\n    export function waitUntil(cond: boolean): void {\n           while (!cond) {\n               basic.pause(100)\n         }\n    }\n\n    /**\n     * Выводит первое значение, если условие истинно, и второе - если ложно\n     */\n    //% block=\"Если %check то %yes иначе %no\"\n    export function container(check: boolean, yes: string, no: string): string {\n        if (check) {\n            return yes\n        } else {\n            return no\n        }\n    }\n\n    /**\n     * Проверка версии micro:bit\n     */\n    //% block=\"это micro:bit v2?\"\n    export function isV2(): boolean {\n        let v2 = false;\n        try {\n            v2 = input.logoIsPressed() == undefined;\n        } catch (e) {\n            v2 = false;\n        }\n        return v2;\n    }\n    /**\n     * Проверка версии micro:bit\n     */\n    //% block=\"Читать число с i2c по адресу %adress , формат - %format , повторялся ли - %repeated?\"\n    export function i2cReadNum(adress: number, format: NumberFormat, repeated?: boolean): number {\n        let buf = pins.i2cReadBuffer(adress, pins.sizeOf(format), repeated)\n        return buf.getNumber(format, 0)\n    }\n}","pxt.json":"{\n    \"name\": \"Mod\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"audio-recording\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"settings.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1759512349137}